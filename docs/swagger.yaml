basePath: /
definitions:
  models.Book:
    properties:
      author:
        type: string
      category:
        $ref: '#/definitions/models.Category'
      effort:
        $ref: '#/definitions/models.Effort'
      id:
        type: string
      is_available:
        type: boolean
      price:
        type: number
      title:
        type: string
    type: object
  models.Category:
    enum:
    - Backend Development
    - Frontend Development
    - DevOps
    - Database
    - Algorithms & Data Structures
    type: string
    x-enum-varnames:
    - BackEnd
    - FrontEnd
    - DevOps
    - Database
    - Algorithms
  models.Effort:
    enum:
    - Beginner
    - Intermediate
    - Advanced
    type: string
    x-enum-varnames:
    - Beginner
    - Intermediate
    - Advanced
host: localhost:8080
info:
  contact: {}
  description: This is a sample bookstore server.
  title: Bookstore API
  version: "1.0"
paths:
  /books:
    get:
      consumes:
      - application/json
      description: Get a list of all books
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Book'
            type: array
      summary: Get all books
      tags:
      - books
    post:
      consumes:
      - application/json
      description: Add a new book to the store
      parameters:
      - description: Book object
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/models.Book'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Book'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new book
      tags:
      - books
  /books/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a book from the store
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete a book
      tags:
      - books
    get:
      consumes:
      - application/json
      description: Get details of a specific book
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Book'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get a book by ID
      tags:
      - books
    put:
      consumes:
      - application/json
      description: Update an existing book's details
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: string
      - description: Book object
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/models.Book'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Book'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update a book
      tags:
      - books
  /books/search:
    get:
      consumes:
      - application/json
      description: Search books using concurrent processing
      parameters:
      - description: Book title to search
        in: query
        name: title
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Book'
            type: array
      summary: Search books by title
      tags:
      - books
swagger: "2.0"
